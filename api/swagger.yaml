---
swagger: "2.0"
info:
  description: "TODO: Add a description"
  version: "1.0"
  title: "FIWARE-NGSI v2 Specification"
host: "orion.lab.fiware.org"
basePath: "/"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /v2:
    get:
      tags:
      - "API Entry Point"
      summary: "Retrieve API Resources"
      description: "This resource does not have any attributes. Instead it offers\
        \ the initial\nAPI affordances in the form of the links in the JSON body.\n\
        It is recommended to follow the “url” link values,\n[Link](https://tools.ietf.org/html/rfc5988)\
        \ or Location headers where\napplicable to retrieve resources. Instead of\
        \ constructing your own URLs,\nto keep your client decoupled from implementation\
        \ details."
      operationId: "Retrieve API Resources"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: ""
          examples:
            application/json:
              entities_url: "/v2/entities"
              types_url: "/v2/types"
              subscriptions_url: "/v2/subscriptions"
              registrations_url: "/v2/registrations"
          schema:
            $ref: "#/definitions/RetrieveApiResourcesResponse"
      x-unitTests:
      - request:
          method: "GET"
          uri: "/v2"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "RAW"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: "application/json"
          body: "{  \"entities_url\": \"/v2/entities\",  \"types_url\": \"/v2/types\"\
            ,  \"subscriptions_url\": \"/v2/subscriptions\",  \"registrations_url\"\
            : \"/v2/registrations\"}"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Retrieve API Resources1"
        x-testDescription: "This resource does not have any attributes. Instead it\
          \ offers the initial\nAPI affordances in the form of the links in the JSON\
          \ body.\nIt is recommended to follow the “url” link values,\n[Link](https://tools.ietf.org/html/rfc5988)\
          \ or Location headers where\napplicable to retrieve resources. Instead of\
          \ constructing your own URLs,\nto keep your client decoupled from implementation\
          \ details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/entities:
    get:
      tags:
      - "Entities"
      summary: "List Entities"
      description: "Retrieves a list of entities that match different criteria by\
        \ id, type, pattern matching (either id or type)\nand/or those which match\
        \ a query or geographical query (see [Simple Query Language](#simple_query_language)\
        \ and \n[Geographical Queries](#geographical_queries)). A given entity has\
        \ to match all the criteria to be retrieved\n(i.e., the criteria is combined\
        \ in a logical AND way). Note that pattern matching query parameters are incompatible\n\
        (i.e. mutually exclusive) with their corresponding exact matching parameters,\
        \ i.e. `idPattern` with `id` and\n`typePattern` with `type`.\nThe response\
        \ payload is an array containing one object per matching entity. Each entity\
        \ follows\nthe JSON entity representation format (described in \"JSON Entity\
        \ Representation\" section).\nResponse code:\n* Successful operation uses\
        \ 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection\
        \ on \"Error Responses\" for\n  more details."
      operationId: "List Entities"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "A comma-separated list of elements.\nRetrieve entities whose\
          \ ID matches one of the elements in the list.\nIncompatible with `idPattern`."
        required: false
        type: "string"
        x-exportParamName: "Id"
        x-optionalDataType: "String"
      - name: "type"
        in: "query"
        description: "comma-separated list of elements.\nRetrieve entities whose type\
          \ matches one of the elements in the list.\nIncompatible with `typePattern`."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "idPattern"
        in: "query"
        description: "A correctly formated regular expression.\nRetrieve entities\
          \ whose ID matches the regular expression. Incompatible with `id`."
        required: false
        type: "string"
        x-exportParamName: "IdPattern"
        x-optionalDataType: "String"
      - name: "typePattern"
        in: "query"
        description: "A correctly formated regular expression.\nRetrieve entities\
          \ whose type matches the regular expression. Incompatible with `type`."
        required: false
        type: "string"
        x-exportParamName: "TypePattern"
        x-optionalDataType: "String"
      - name: "q"
        in: "query"
        description: "A query expression, composed of a list of statements\nseparated\
          \ by `;`, i.e., q=statement1;statement2;statement3.\nSee [Simple Query Language\
          \ specification](#simple_query_language)."
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "mq"
        in: "query"
        description: "A query expression for attribute metadata,\ncomposed of a list\
          \ of statements separated by `;`, i.e., mq=statement1;statement2;statement3.\n\
          See [Simple Query Language specification](#simple_query_language)."
        required: false
        type: "string"
        x-exportParamName: "Mq"
        x-optionalDataType: "String"
      - name: "georel"
        in: "query"
        description: "Spatial relationship between matching entities and a\nreference\
          \ shape. See [Geographical Queries](#geographical_queries)."
        required: false
        type: "string"
        x-exportParamName: "Georel"
        x-optionalDataType: "String"
      - name: "geometry"
        in: "query"
        description: "Geografical area to which the query is restricted.\nSee [Geographical\
          \ Queries](#geographical_queries)."
        required: false
        type: "string"
        x-exportParamName: "Geometry"
        x-optionalDataType: "String"
      - name: "coords"
        in: "query"
        description: "List of latitude-longitude\npairs of coordinates separated by\
          \ ';'. See [Geographical Queries](#geographical_queries)."
        required: false
        type: "string"
        x-exportParamName: "Coords"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Limits the number of entities to be retrieved"
        required: false
        type: "number"
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "offset"
        in: "query"
        description: "Establishes the offset from where entities are retrieved"
        required: false
        type: "number"
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: "double"
        x-exportParamName: "Offset"
        x-optionalDataType: "Float64"
      - name: "attrs"
        in: "query"
        description: "Comma-separated list of attribute names whose data\nare to be\
          \ included in the response.\nThe attributes are retrieved in the order specified\
          \ by this parameter. If this parameter is\nnot included, the attributes\
          \ are retrieved in arbitrary order.\nSee \"Filtering out attributes and\
          \ metadata\" section for more detail."
        required: false
        type: "string"
        x-exportParamName: "Attrs"
        x-optionalDataType: "String"
      - name: "metadata"
        in: "query"
        description: "A list of metadata names to include in the response.\nSee \"\
          Filtering out attributes and metadata\" section for more detail."
        required: false
        type: "string"
        x-exportParamName: "Metadata"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        description: "Criteria for ordering results.\nSee \"Ordering Results\" section\
          \ for details."
        required: false
        type: "string"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "count"
        - "keyValues"
        - "values"
        - "unique"
        x-enum-elements:
        - name: "count"
          description: ""
        - name: "keyValues"
          description: ""
        - name: "values"
          description: ""
        - name: "unique"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          examples:
            application/json:
            - type: "Room"
              id: "DC_S1-D41"
              temperature:
                value: 35.6
                type: "Number"
                metadata: {}
            - type: "Room"
              id: "Boe-Idearium"
              temperature:
                value: 22.5
                type: "Number"
                metadata: {}
            - type: "Car"
              id: "P-9873-K"
              speed:
                value: 100
                type: "number"
                metadata:
                  accuracy:
                    value: 2
                    type: "Number"
                  timestamp:
                    value: "2015-06-04T07:20:27.378Z"
                    type: "DateTime"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ListEntitiesResponse"
      x-unitTests:
      - request:
          method: "GET"
          uri: "/v2/entities?id=Boe_Idearium&type=Room&idPattern=Bode_.*&typePattern=Room_.*&q=temperature>40&mq=temperature.accuracy<0.9&georel=near&geometry=point&coords=41.390205,2.154007;48.8566,2.3522&limit=20&offset=20&attrs=seatNumber&metadata=accuracy&orderBy=temperature,!speed"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "RAW"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: "application/json"
          body: "[ {   \"type\": \"Room\",   \"id\": \"DC_S1-D41\",   \"temperature\"\
            : {     \"value\": 35.6,     \"type\": \"Number\",     \"metadata\": {}\
            \   } }, {   \"type\": \"Room\",   \"id\": \"Boe-Idearium\",   \"temperature\"\
            : {     \"value\": 22.5,     \"type\": \"Number\",     \"metadata\": {}\
            \   } }, {   \"type\": \"Car\",   \"id\": \"P-9873-K\",   \"speed\": {\
            \     \"value\": 100,     \"type\": \"number\",     \"metadata\": {  \
            \     \"accuracy\": {         \"value\": 2,         \"type\": \"Number\"\
            \       },       \"timestamp\": {         \"value\": \"2015-06-04T07:20:27.378Z\"\
            ,         \"type\": \"DateTime\"       }     }   } }]"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "List Entities1"
        x-testDescription: "Retrieves a list of entities that match different criteria\
          \ by id, type, pattern matching (either id or type)\nand/or those which\
          \ match a query or geographical query (see [Simple Query Language](#simple_query_language)\
          \ and \n[Geographical Queries](#geographical_queries)). A given entity has\
          \ to match all the criteria to be retrieved\n(i.e., the criteria is combined\
          \ in a logical AND way). Note that pattern matching query parameters are\
          \ incompatible\n(i.e. mutually exclusive) with their corresponding exact\
          \ matching parameters, i.e. `idPattern` with `id` and\n`typePattern` with\
          \ `type`.\nThe response payload is an array containing one object per matching\
          \ entity. Each entity follows\nthe JSON entity representation format (described\
          \ in \"JSON Entity Representation\" section).\nResponse code:\n* Successful\
          \ operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error\
          \ payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
      - "Entities"
      summary: "Create Entity"
      description: "The payload is an object representing the entity to be created.\
        \ The object follows\nthe JSON entity representation format (described in\
        \ a \"JSON Entity Representation\" section).\nResponse:\n* Successful operation\
        \ uses 201 Created (if upsert option is not used) or 204 No Content (if\n\
        \  upsert option is used). Response includes a `Location` header with the\
        \ URL of the\n  created entity.\n* Errors use a non-2xx and (optionally) an\
        \ error payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "Create Entity"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/CreateEntityRequest"
        x-exportParamName: "Body"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "keyValues"
        - "upsert"
        x-enum-elements:
        - name: "keyValues"
          description: ""
        - name: "upsert"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "204":
          description: ""
      x-unitTests:
      - request:
          method: "POST"
          uri: "/v2/entities"
          headers:
            Content-Type: "application/json"
          body: "{  \"type\": \"Room\",  \"id\": \"Bcn-Welt\",  \"temperature\": {\
            \    \"value\": 21.7  },  \"humidity\": {    \"value\": 60  },  \"location\"\
            : {    \"value\": \"41.3763726, 2.1864475\",    \"type\": \"geo:point\"\
            ,    \"metadata\": {      \"crs\": {        \"value\": \"WGS84\"     \
            \ }    }  }}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Location: "/v2/entities/Bcn-Welt?type=Room"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Create Entity1"
        x-testDescription: "The payload is an object representing the entity to be\
          \ created. The object follows\nthe JSON entity representation format (described\
          \ in a \"JSON Entity Representation\" section).\nResponse:\n* Successful\
          \ operation uses 201 Created (if upsert option is not used) or 204 No Content\
          \ (if\n  upsert option is used). Response includes a `Location` header with\
          \ the URL of the\n  created entity.\n* Errors use a non-2xx and (optionally)\
          \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/entities/{entityId}:
    get:
      tags:
      - "Entities"
      summary: "Retrieve Entity"
      description: "The response is an object representing the entity identified by\
        \ the ID. The object follows\nthe JSON entity representation format (described\
        \ in \"JSON Entity Representation\" section).\nThis operation must return\
        \ one entity element only, but there may be more than one entity with the\n\
        same ID (e.g. entities with same ID but different types).\nIn such case, an\
        \ error message is returned, with the HTTP status code set to 409 Conflict.\n\
        Response:\n* Successful operation uses 200 OK\n* Errors use a non-2xx and\
        \ (optionally) an error payload. See subsection on \"Error Responses\" for\
        \ more details."
      operationId: "Retrieve Entity"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to be retrieved"
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "attrs"
        in: "query"
        description: "Comma-separated list of attribute names whose\ndata must be\
          \ included in the response. The attributes are retrieved in the order specified\
          \ by\nthis parameter. See \"Filtering out attributes and metadata\" section\
          \ for more detail.\nIf this parameter is not included, the attributes are\
          \ retrieved in arbitrary order, and all\nthe attributes of the entity are\
          \ included in the response."
        required: false
        type: "string"
        x-exportParamName: "Attrs"
        x-optionalDataType: "String"
      - name: "metadata"
        in: "query"
        description: "A list of metadata names to include in the response.\nSee \"\
          Filtering out attributes and metadata\" section for more detail."
        required: false
        type: "string"
        x-exportParamName: "Metadata"
        x-optionalDataType: "String"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "keyValues"
        - "values"
        - "unique"
        x-enum-elements:
        - name: "keyValues"
          description: ""
        - name: "values"
          description: ""
        - name: "unique"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          examples:
            application/json:
              type: "Room"
              id: "Bcn_Welt"
              temperature:
                value: 21.7
                type: "Number"
              humidity:
                value: 60
                type: "Number"
              location:
                value: "41.3763726, 2.1864475"
                type: "geo:point"
                metadata:
                  crs:
                    value: "WGS84"
                    type: "Text"
          schema:
            $ref: "#/definitions/RetrieveEntityResponse"
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      tags:
      - "Entities"
      summary: "Remove Entity"
      description: "Delete the entity.\nResponse:\n* Successful operation uses 204\
        \ No Content\n* Errors use a non-2xx and (optionally) an error payload. See\
        \ subsection on \"Error Responses\" for\n  more details."
      operationId: "Remove Entity"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to be deleted"
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      responses:
        "204":
          description: ""
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/entities/{entityId}/attrs:
    get:
      tags:
      - "Entities"
      summary: "Retrieve Entity Attributes"
      description: "This request is similar to retreiving the whole entity, however\
        \ this one omits the `id` and `type`\nfields.\nJust like the general request\
        \ of getting an entire entity, this operation must return only one\nentity\
        \ element. If more than one entity with the same ID is found (e.g. entities\
        \ with\nsame ID but different type), an error message is returned, with the\
        \ HTTP status code set to\n409 Conflict.\nResponse:\n* Successful operation\
        \ uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See\
        \ subsection on \"Error Responses\" for\n  more details."
      operationId: "Retrieve Entity Attributes"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to be retrieved"
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "attrs"
        in: "query"
        description: "Comma-separated list of attribute names whose\ndata are to be\
          \ included in the response. The attributes are retrieved in the order specified\n\
          by this parameter.\nIf this parameter is not included, the attributes are\
          \ retrieved in arbitrary order, and all\nthe attributes of the entity are\
          \ included in the response.\nSee \"Filtering out attributes and metadata\"\
          \ section for more detail."
        required: false
        type: "string"
        x-exportParamName: "Attrs"
        x-optionalDataType: "String"
      - name: "metadata"
        in: "query"
        description: "A list of metadata names to include in the response.\nSee \"\
          Filtering out attributes and metadata\" section for more detail."
        required: false
        type: "string"
        x-exportParamName: "Metadata"
        x-optionalDataType: "String"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "keyValues"
        - "values"
        - "unique"
        x-enum-elements:
        - name: "keyValues"
          description: ""
        - name: "values"
          description: ""
        - name: "unique"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          examples:
            application/json:
              temperature:
                value: 21.7
                type: "Number"
              humidity:
                value: 60
                type: "Number"
              location:
                value: "41.3763726, 2.1864475"
                type: "geo:point"
                metadata:
                  crs:
                    value: "WGS84"
                    type: "Text"
          schema:
            $ref: "#/definitions/RetrieveEntityAttributesResponse"
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
      - "Entities"
      summary: "Update or Append Entity Attributes"
      description: "The request payload is an object representing the attributes to\
        \ append or update. The object follows\nthe JSON entity representation format\
        \ (described in \"JSON Entity Representation\" section), except\nthat `id`\
        \ and `type` are not allowed.\nThe entity attributes are updated with the\
        \ ones in the payload, depending on\nwhether the `append` operation option\
        \ is used or not.\n* If `append` is not used: the entity attributes are updated\
        \ (if they previously exist) or appended\n  (if they don't previously exist)\
        \ with the ones in the payload.\n* If `append` is used (i.e. strict append\
        \ semantics): all the attributes in the payload not\n  previously existing\
        \ in the entity are appended. In addition to that, in case some of the\n \
        \ attributes in the payload already exist in the entity, an error is returned.\n\
        Response:\n* Successful operation uses 204 No Content\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "Update or Append Entity Attributes"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Entity id to be updated"
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/UpdateOrAppendEntityAttributesRequest"
        x-exportParamName: "Body"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "options"
        in: "query"
        description: "Operations options"
        required: false
        type: "string"
        enum:
        - "append"
        - "keyValues"
        x-enum-elements:
        - name: "append"
          description: ""
        - name: "keyValues"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "204":
          description: ""
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      tags:
      - "Entities"
      summary: "Replace all entity attributes"
      description: "The request payload is an object representing the new entity attributes.\
        \ The object follows\nthe JSON entity representation format (described in\
        \ a \"JSON Entity Representation\" above), except\nthat `id` and `type` are\
        \ not allowed.\nThe attributes previously existing in the entity are removed\
        \ and replaced by the ones in the\nrequest.\nResponse:\n* Successful operation\
        \ uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "Replace all entity attributes"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity in question."
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/ReplaceAllEntityAttributesRequest"
        x-exportParamName: "Body"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "options"
        in: "query"
        description: "Operations options"
        required: false
        type: "string"
        enum:
        - "keyValues"
        x-enum-elements:
        - name: "keyValues"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "204":
          description: ""
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    patch:
      tags:
      - "Entities"
      summary: "Update Existing Entity Attributes"
      description: "The request payload is an object representing the attributes to\
        \ update. The object follows\nthe JSON entity representation format (described\
        \ in \"JSON Entity Representation\" section), except\nthat `id` and `type`\
        \ are not allowed.\nThe entity attributes are updated with the ones in the\
        \ payload. In addition to that, if one or more\nattributes in the payload\
        \ doesn't exist in the entity, an error is returned.\nResponse:\n* Successful\
        \ operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an\
        \ error payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "Update Existing Entity Attributes"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to be updated"
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/UpdateExistingEntityAttributesRequest"
        x-exportParamName: "Body"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "options"
        in: "query"
        description: "Operations options"
        required: false
        type: "string"
        enum:
        - "keyValues"
        x-enum-elements:
        - name: "keyValues"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "204":
          description: ""
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/entities/{entityId}/attrs/{attrName}:
    get:
      tags:
      - "Attributes"
      summary: "Get attribute data"
      description: "Returns a JSON object with the attribute data of the attribute.\
        \ The object follows the JSON\nrepresentation for attributes (described in\
        \ \"JSON Attribute Representation\" section).\nResponse:\n* Successful operation\
        \ uses 200 OK.\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "Get attribute data"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity"
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "attrName"
        in: "path"
        description: "Name of the attribute to be retrieved."
        required: true
        type: "string"
        x-exportParamName: "AttrName"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      - name: "metadata"
        in: "query"
        description: "A list of metadata names to include in the response.\nSee \"\
          Filtering out attributes and metadata\" section for more detail."
        required: false
        type: "string"
        x-exportParamName: "Metadata"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          examples:
            application/json:
              value: 21.7
              type: "Number"
              metadata: {}
          schema:
            $ref: "#/definitions/GetAttributeDataResponse"
      x-unitTests:
      - request:
          method: "GET"
          uri: "/v2/entities/Bcn_Welt/attrs/temperature?metadata=accuracy"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "RAW"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: "application/json"
          body: "{  \"value\": 21.7,  \"type\": \"Number\",  \"metadata\": {}}"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Get attribute data1"
        x-testDescription: "Returns a JSON object with the attribute data of the attribute.\
          \ The object follows the JSON\nrepresentation for attributes (described\
          \ in \"JSON Attribute Representation\" section).\nResponse:\n* Successful\
          \ operation uses 200 OK.\n* Errors use a non-2xx and (optionally) an error\
          \ payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      tags:
      - "Attributes"
      summary: "Update Attribute Data"
      description: "The request payload is an object representing the new attribute\
        \ data. Previous attribute data\nis replaced by the one in the request. The\
        \ object follows the JSON representation for attributes\n(described in \"\
        JSON Attribute Representation\" section).\nResponse:\n* Successful operation\
        \ uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "Update Attribute Data"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to update"
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "attrName"
        in: "path"
        description: "Attribute name"
        required: true
        type: "string"
        x-exportParamName: "AttrName"
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/UpdateAttributeDataRequest"
        x-exportParamName: "Body"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
      x-unitTests:
      - request:
          method: "PUT"
          uri: "/v2/entities/Bcn_Welt/attrs/temperature"
          headers:
            Content-Type: "application/json"
          body: "{  \"value\": 25.0,  \"metadata\": {    \"unitCode\": {      \"value\"\
            : \"CEL\"    }  }}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Update Attribute Data1"
        x-testDescription: "The request payload is an object representing the new\
          \ attribute data. Previous attribute data\nis replaced by the one in the\
          \ request. The object follows the JSON representation for attributes\n(described\
          \ in \"JSON Attribute Representation\" section).\nResponse:\n* Successful\
          \ operation uses 204 No Content\n* Errors use a non-2xx and (optionally)\
          \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      tags:
      - "Attributes"
      summary: "Remove a Single Attribute"
      description: "Removes an entity attribute.\nResponse:\n* Successful operation\
        \ uses 204 No Content\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "Remove a Single Attribute"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity."
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "attrName"
        in: "path"
        description: "Attribute name."
        required: true
        type: "string"
        x-exportParamName: "AttrName"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      responses:
        "204":
          description: ""
      x-unitTests:
      - request:
          method: "DELETE"
          uri: "/v2/entities/Bcn_Welt/attrs/temperature"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Remove a Single Attribute1"
        x-testDescription: "Removes an entity attribute.\nResponse:\n* Successful\
          \ operation uses 204 No Content\n* Errors use a non-2xx and (optionally)\
          \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/entities/{entityId}/attrs/{attrName}/value:
    get:
      tags:
      - "Attribute Value"
      summary: "Get Attribute Value"
      description: "This operation returns the `value` property with the value of\
        \ the attribute.\n* If attribute value is JSON Array or Object:\n  * If `Accept`\
        \ header can be expanded to `application/json` or `text/plain` return the\
        \ value as a JSON with a\n    response type of application/json or text/plain\
        \ (whichever is the first in `Accept` header or\n    `application/json` in\
        \ case of `Accept: */*`).\n  * Else return a HTTP error \"406 Not Acceptable:\
        \ accepted MIME types: application/json, text/plain\"\n* If attribute value\
        \ is a string, number, null or boolean:\n  * If `Accept` header can be expanded\
        \ to text/plain return the value as text. In case of a string, citation\n\
        \    marks are used at the begining and end.\n  * Else return a HTTP error\
        \ \"406 Not Acceptable: accepted MIME types: text/plain\"\nResponse:\n* Successful\
        \ operation uses 200 OK.\n* Errors use a non-2xx and (optionally) an error\
        \ payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "Get Attribute Value"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity in question"
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "attrName"
        in: "path"
        description: "Name of the attribute to be retrieved."
        required: true
        type: "string"
        x-exportParamName: "AttrName"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          examples:
            application/json:
              address: "Ronda de la Comunicacion s/n"
              zipCode: 28050
              city: "Madrid"
              country: "Spain"
          schema:
            $ref: "#/definitions/GetAttributeValueResponse"
      x-unitTests:
      - request:
          method: "GET"
          uri: "/v2/entities/Bcn_Welt/attrs/address/value"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "RAW"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: "application/json"
          body: "{  \"address\": \"Ronda de la Comunicacion s/n\",  \"zipCode\": 28050,\
            \  \"city\": \"Madrid\",  \"country\": \"Spain\"}"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Get Attribute Value1"
        x-testDescription: "This operation returns the `value` property with the value\
          \ of the attribute.\n* If attribute value is JSON Array or Object:\n  *\
          \ If `Accept` header can be expanded to `application/json` or `text/plain`\
          \ return the value as a JSON with a\n    response type of application/json\
          \ or text/plain (whichever is the first in `Accept` header or\n    `application/json`\
          \ in case of `Accept: */*`).\n  * Else return a HTTP error \"406 Not Acceptable:\
          \ accepted MIME types: application/json, text/plain\"\n* If attribute value\
          \ is a string, number, null or boolean:\n  * If `Accept` header can be expanded\
          \ to text/plain return the value as text. In case of a string, citation\n\
          \    marks are used at the begining and end.\n  * Else return a HTTP error\
          \ \"406 Not Acceptable: accepted MIME types: text/plain\"\nResponse:\n*\
          \ Successful operation uses 200 OK.\n* Errors use a non-2xx and (optionally)\
          \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    put:
      tags:
      - "Attribute Value"
      summary: "Update Attribute Value"
      description: "The request payload is the new attribute value.\n* If the request\
        \ payload MIME type is `application/json`, then the value of the attribute\
        \ is set to\n  the JSON object or array coded in the payload (if the payload\
        \ is not a valid JSON document,\n  then an error is returned).\n* If the request\
        \ payload MIME type is `text/plain`, then the following algorithm is applied\
        \ to the\n  payload:\n  * If the payload starts and ends with citation-marks\
        \ (`\"`), the value is taken as a string\n    (the citation marks themselves\
        \ are not considered part of the string)\n  * If `true` or `false`, the value\
        \ is taken as a boolean.\n  * If `null`, the value is taken as null.\n  *\
        \ If these first three tests 'fail', the text is interpreted as a number.\n\
        \  * If not a valid number, then an error is returned and the attribute's\
        \ value is unchanged.\nThe payload MIME type in the request is specified in\
        \ the `Content-Type` HTTP header.\nResponse:\n* Successful operation uses\
        \ 204 No Content\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "Update Attribute Value"
      produces:
      - "application/json"
      parameters:
      - name: "entityId"
        in: "path"
        description: "Id of the entity to be updated."
        required: true
        type: "string"
        x-exportParamName: "EntityId"
      - name: "attrName"
        in: "path"
        description: "Attribute name."
        required: true
        type: "string"
        x-exportParamName: "AttrName"
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/UpdateAttributeValueRequest"
        x-exportParamName: "Body"
      - name: "type"
        in: "query"
        description: "Entity type, to avoid ambiguity in case there are several\n\
          entities with the same entity id."
        required: false
        type: "string"
        x-exportParamName: "Type_"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
      x-unitTests:
      - request:
          method: "PUT"
          uri: "/v2/entities/Bcn_Welt/attrs/address/value"
          headers:
            Content-Type: "application/json"
          body: "{  \"address\": \"Ronda de la Comunicacion s/n\",  \"zipCode\": 28050,\
            \  \"city\": \"Madrid\",  \"country\": \"Spain\"}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Update Attribute Value1"
        x-testDescription: "The request payload is the new attribute value.\n* If\
          \ the request payload MIME type is `application/json`, then the value of\
          \ the attribute is set to\n  the JSON object or array coded in the payload\
          \ (if the payload is not a valid JSON document,\n  then an error is returned).\n\
          * If the request payload MIME type is `text/plain`, then the following algorithm\
          \ is applied to the\n  payload:\n  * If the payload starts and ends with\
          \ citation-marks (`\"`), the value is taken as a string\n    (the citation\
          \ marks themselves are not considered part of the string)\n  * If `true`\
          \ or `false`, the value is taken as a boolean.\n  * If `null`, the value\
          \ is taken as null.\n  * If these first three tests 'fail', the text is\
          \ interpreted as a number.\n  * If not a valid number, then an error is\
          \ returned and the attribute's value is unchanged.\nThe payload MIME type\
          \ in the request is specified in the `Content-Type` HTTP header.\nResponse:\n\
          * Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally)\
          \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/types/:
    get:
      tags:
      - "Types"
      summary: "List Entity Types"
      description: "If the `values` option is not in use, this operation returns a\
        \ JSON array with the entity types.\nEach element is a JSON object with information\
        \ about the type:\n* `type` : the entity type name.\n* `attrs` : the set of\
        \ attribute names along with all the entities of such type, represented in\n\
        \  a JSON object whose keys are the attribute names and whose values contain\
        \ information of such\n  attributes (in particular a list of the types used\
        \ by attributes with that name along with all the\n  entities).\n* `count`\
        \ : the number of entities belonging to that type.\nIf the `values` option\
        \ is used, the operation returns a JSON array with a list of entity type\n\
        names as strings.\nResults are ordered by entity `type` in alphabetical order.\n\
        Response code:\n* Successful operation uses 200 OK\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "List Entity Types"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of types to be retrieved."
        required: false
        type: "number"
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "offset"
        in: "query"
        description: "Skip a number of records."
        required: false
        type: "number"
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: "double"
        x-exportParamName: "Offset"
        x-optionalDataType: "Float64"
      - name: "options"
        in: "query"
        description: "Options dictionary."
        required: false
        type: "string"
        enum:
        - "count"
        - "values"
        x-enum-elements:
        - name: "count"
          description: ""
        - name: "values"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          examples:
            application/json:
            - type: "Car"
              attrs:
                speed:
                  types:
                  - "Number"
                fuel:
                  types:
                  - "gasoline"
                  - "diesel"
                temperature:
                  types:
                  - "urn:phenomenum:temperature"
              count: 12
            - type: "Room"
              attrs:
                pressure:
                  types:
                  - "Number"
                humidity:
                  types:
                  - "percentage"
                temperature:
                  types:
                  - "urn:phenomenum:temperature"
              count: 7
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ListEntityTypesResponse"
      x-unitTests:
      - request:
          method: "GET"
          uri: "/v2/types/?limit=10&offset=20"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "RAW"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: "application/json"
          body: "[  {    \"type\": \"Car\",    \"attrs\": {      \"speed\": {    \
            \    \"types\": [ \"Number\" ]      },      \"fuel\": {        \"types\"\
            : [ \"gasoline\", \"diesel\" ]      },      \"temperature\": {       \
            \ \"types\": [ \"urn:phenomenum:temperature\" ]      }    },    \"count\"\
            : 12  },  {    \"type\": \"Room\",    \"attrs\": {      \"pressure\":\
            \ {        \"types\": [ \"Number\" ]      },      \"humidity\": {    \
            \    \"types\": [ \"percentage\" ]      },      \"temperature\": {   \
            \     \"types\": [ \"urn:phenomenum:temperature\" ]      }    },    \"\
            count\": 7  }]"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "List Entity Types1"
        x-testDescription: "If the `values` option is not in use, this operation returns\
          \ a JSON array with the entity types.\nEach element is a JSON object with\
          \ information about the type:\n* `type` : the entity type name.\n* `attrs`\
          \ : the set of attribute names along with all the entities of such type,\
          \ represented in\n  a JSON object whose keys are the attribute names and\
          \ whose values contain information of such\n  attributes (in particular\
          \ a list of the types used by attributes with that name along with all the\n\
          \  entities).\n* `count` : the number of entities belonging to that type.\n\
          If the `values` option is used, the operation returns a JSON array with\
          \ a list of entity type\nnames as strings.\nResults are ordered by entity\
          \ `type` in alphabetical order.\nResponse code:\n* Successful operation\
          \ uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload.\
          \ See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/types/{entityType}:
    get:
      tags:
      - "Types"
      summary: "Retrieve entity type"
      description: "This operation returns a JSON object with information about the\
        \ type:\n* `attrs` : the set of attribute names along with all the entities\
        \ of such type, represented in\n  a JSON object whose keys are the attribute\
        \ names and whose values contain information of such\n  attributes (in particular\
        \ a list of the types used by attributes with that name along with all the\n\
        \  entities).\n* `count` : the number of entities belonging to that type.\n\
        Response code:\n* Successful operation uses 200 OK\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "Retrieve entity type"
      produces:
      - "application/json"
      parameters:
      - name: "entityType"
        in: "path"
        description: "Entity Type"
        required: true
        type: "string"
        x-exportParamName: "EntityType"
      responses:
        "200":
          description: ""
          examples:
            application/json:
              attrs:
                pressure:
                  types:
                  - "Number"
                humidity:
                  types:
                  - "percentage"
                temperature:
                  types:
                  - "urn:phenomenum:temperature"
              count: 7
          schema:
            $ref: "#/definitions/RetrieveEntityTypeResponse"
      x-unitTests:
      - request:
          method: "GET"
          uri: "/v2/types/Room"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "RAW"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: "application/json"
          body: "  {    \"attrs\": {      \"pressure\": {        \"types\": [ \"Number\"\
            \ ]      },      \"humidity\": {        \"types\": [ \"percentage\" ]\
            \      },      \"temperature\": {        \"types\": [ \"urn:phenomenum:temperature\"\
            \ ]      }    },    \"count\": 7  }"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Retrieve entity type1"
        x-testDescription: "This operation returns a JSON object with information\
          \ about the type:\n* `attrs` : the set of attribute names along with all\
          \ the entities of such type, represented in\n  a JSON object whose keys\
          \ are the attribute names and whose values contain information of such\n\
          \  attributes (in particular a list of the types used by attributes with\
          \ that name along with all the\n  entities).\n* `count` : the number of\
          \ entities belonging to that type.\nResponse code:\n* Successful operation\
          \ uses 200 OK\n* Errors use a non-2xx and (optionally) an error payload.\
          \ See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/subscriptions:
    get:
      tags:
      - "Subscriptions"
      summary: "List Subscriptions"
      description: "Returns a list of all the subscriptions present in the system.\n\
        Response:\n* Successful operation uses 200 OK\n* Errors use a non-2xx and\
        \ (optionally) an error payload. See subsection on \"Error Responses\" for\n\
        \  more details."
      operationId: "List Subscriptions"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of subscriptions to be retrieved"
        required: false
        type: "number"
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "offset"
        in: "query"
        description: "Skip a number of subscriptions"
        required: false
        type: "number"
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: "double"
        x-exportParamName: "Offset"
        x-optionalDataType: "Float64"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "count"
        x-enum-elements:
        - name: "count"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          examples:
            application/json:
            - id: "abcdefg"
              description: "One subscription to rule them all"
              subject:
                entities:
                - id: "Bcn_Welt"
                  type: "Room"
                condition:
                  attrs:
                  - "temperature "
                  expression:
                    q: "temperature>40"
              notification:
                httpCustom:
                  url: "http://localhost:1234"
                  headers:
                    X-MyHeader: "foo"
                  qs:
                    authToken: "bar"
                attrsFormat: "keyValues"
                attrs:
                - "temperature"
                - "humidity"
                timesSent: 12
                lastNotification: "2015-10-05T16:00:00Z"
                lastFailure: "2015-10-06T16:00:00Z"
              expires: "2016-04-05T14:00:00Z"
              status: "failed"
              throttling: 5
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ListSubscriptionsResponse"
      x-unitTests:
      - request:
          method: "GET"
          uri: "/v2/subscriptions?limit=10&offset=20"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "RAW"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: "[  {    \"id\": \"abcdefg\",    \"description\": \"One subscription\
            \ to rule them all\",    \"subject\": {                          \"entities\"\
            : [        {          \"id\": \"Bcn_Welt\",          \"type\": \"Room\"\
            \        }      ],      \"condition\": {         \"attrs\": [ \"temperature\
            \ \" ],         \"expression\": {            \"q\": \"temperature>40\"\
            \         }      }    },    \"notification\": {      \"httpCustom\": {\
            \        \"url\": \"http://localhost:1234\",        \"headers\": {   \
            \       \"X-MyHeader\": \"foo\"        },        \"qs\": {          \"\
            authToken\": \"bar\"        }      },      \"attrsFormat\": \"keyValues\"\
            ,      \"attrs\": [\"temperature\", \"humidity\"],      \"timesSent\"\
            : 12,      \"lastNotification\": \"2015-10-05T16:00:00.00Z\",      \"\
            lastFailure\": \"2015-10-06T16:00:00.00Z\"    },    \"expires\": \"2016-04-05T14:00:00.00Z\"\
            ,    \"status\": \"failed\",    \"throttling\": 5  }]"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "List Subscriptions1"
        x-testDescription: "Returns a list of all the subscriptions present in the\
          \ system.\nResponse:\n* Successful operation uses 200 OK\n* Errors use a\
          \ non-2xx and (optionally) an error payload. See subsection on \"Error Responses\"\
          \ for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
      - "Subscriptions"
      summary: "Create Subscription"
      description: "Creates a new subscription.\nThe subscription is represented by\
        \ a JSON object as described at the beginning of this section.\nResponse:\n\
        * Successful operation uses 201 Created\n* Errors use a non-2xx and (optionally)\
        \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "Create Subscription"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/CreateSubscriptionRequest"
        x-exportParamName: "Body"
      responses:
        "201":
          description: ""
      x-unitTests:
      - request:
          method: "POST"
          uri: "/v2/subscriptions"
          headers:
            Content-Type: "application/json"
          body: "{  \"description\": \"One subscription to rule them all\",  \"subject\"\
            : {    \"entities\": [      {        \"idPattern\": \".*\",        \"\
            type\": \"Room\"      }    ],    \"condition\": {      \"attrs\": [ \"\
            temperature\" ],      \"expression\": {        \"q\": \"temperature>40\"\
            \      }    }  },  \"notification\": {    \"http\": {      \"url\": \"\
            http://localhost:1234\"    },    \"attrs\": [\"temperature\", \"humidity\"\
            ]  },              \"expires\": \"2016-04-05T14:00:00.00Z\",  \"throttling\"\
            : 5}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Location: "/v2/subscriptions/abcde98765"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Create Subscription1"
        x-testDescription: "Creates a new subscription.\nThe subscription is represented\
          \ by a JSON object as described at the beginning of this section.\nResponse:\n\
          * Successful operation uses 201 Created\n* Errors use a non-2xx and (optionally)\
          \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/subscriptions/{subscriptionId}:
    get:
      tags:
      - "Subscriptions"
      summary: "Retrieve Subscription"
      description: "The response is the subscription represented by a JSON object\
        \ as described at the beginning of this\nsection.\nResponse:\n* Successful\
        \ operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error\
        \ payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "Retrieve Subscription"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionId"
        in: "path"
        description: "subscription Id."
        required: true
        type: "string"
        x-exportParamName: "SubscriptionId"
      responses:
        "200":
          description: ""
          schema:
            type: "object"
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      tags:
      - "Subscriptions"
      summary: "Delete subscription"
      description: "Cancels subscription.\nResponse:\n* Successful operation uses\
        \ 204 No Content\n* Errors use a non-2xx and (optionally) an error payload.\
        \ See subsection on \"Error Responses\" for\n  more details."
      operationId: "Delete subscription"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionId"
        in: "path"
        description: "subscription Id."
        required: true
        type: "string"
        x-exportParamName: "SubscriptionId"
      responses:
        "204":
          description: ""
      x-unitTests:
      - request:
          method: "DELETE"
          uri: "/v2/subscriptions/abcdef"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Delete subscription1"
        x-testDescription: "Cancels subscription.\nResponse:\n* Successful operation\
          \ uses 204 No Content\n* Errors use a non-2xx and (optionally) an error\
          \ payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    patch:
      tags:
      - "Subscriptions"
      summary: "Update Subscription"
      description: "Only the fields included in the request are updated in the subscription.\n\
        Response:\n* Successful operation uses 204 No Content\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "Update Subscription"
      produces:
      - "application/json"
      parameters:
      - name: "subscriptionId"
        in: "path"
        description: "subscription Id."
        required: true
        type: "string"
        x-exportParamName: "SubscriptionId"
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/UpdateSubscriptionRequest"
        x-exportParamName: "Body"
      responses:
        "204":
          description: ""
      x-unitTests:
      - request:
          method: "PATCH"
          uri: "/v2/subscriptions/abcdef"
          headers:
            Content-Type: "application/json"
          body: "{  \"expires\": \"2016-04-05T14:00:00.00Z\"}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Update Subscription1"
        x-testDescription: "Only the fields included in the request are updated in\
          \ the subscription.\nResponse:\n* Successful operation uses 204 No Content\n\
          * Errors use a non-2xx and (optionally) an error payload. See subsection\
          \ on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/registrations:
    get:
      tags:
      - "Registrations"
      summary: "List Registrations"
      description: "Lists all the context provider registrations present in the system."
      operationId: "List Registrations"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of registrations to be retrieved"
        required: false
        type: "number"
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "offset"
        in: "query"
        description: "Skip a number of registrations"
        required: false
        type: "number"
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: "double"
        x-exportParamName: "Offset"
        x-optionalDataType: "Float64"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "count"
        x-enum-elements:
        - name: "count"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          examples:
            application/json:
            - id: "abcdefg"
              description: "Example Context Source"
              dataProvided:
                entities:
                - id: "Bcn_Welt"
                  type: "Room"
                attrs:
                - "temperature"
              provider:
                http:
                  url: "http://contextsource.example.org"
                supportedForwardingMode: "all"
              expires: "2017-10-31T12:00:00"
              status: "active"
              forwardingInformation:
                timesSent: 12
                lastForwarding: "2017-10-06T16:00:00Z"
                lastSuccess: "2017-10-06T16:00:00Z"
                lastFailure: "2017-10-05T16:00:00Z"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ListRegistrationsResponse"
      x-unitTests:
      - request:
          method: "GET"
          uri: "/v2/registrations?limit=10&offset=20"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "RAW"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: "[  {    \"id\": \"abcdefg\",    \"description\": \"Example Context\
            \ Source\",    \"dataProvided\": {      \"entities\": [        {     \
            \     \"id\": \"Bcn_Welt\",          \"type\": \"Room\"        }     \
            \ ],      \"attrs\": [        \"temperature\"      ]    },    \"provider\"\
            : {      \"http\": {        \"url\": \"http://contextsource.example.org\"\
            \      },      \"supportedForwardingMode\": \"all\"    },    \"expires\"\
            : \"2017-10-31T12:00:00\",    \"status\": \"active\",    \"forwardingInformation\"\
            : {      \"timesSent\": 12,      \"lastForwarding\": \"2017-10-06T16:00:00.00Z\"\
            ,      \"lastSuccess\": \"2017-10-06T16:00:00.00Z\",      \"lastFailure\"\
            : \"2017-10-05T16:00:00.00Z\"    }  }]"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "List Registrations1"
        x-testDescription: "Lists all the context provider registrations present in\
          \ the system."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    post:
      tags:
      - "Registrations"
      summary: "Create Registration"
      description: "Creates a new context provider registration. This is typically\
        \ used for binding context sources\nas providers of certain data.\nThe registration\
        \ is represented by a JSON object as described at the beginning of this section.\n\
        Response:\n* Successful operation uses 201 Created\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "Create Registration"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/CreateRegistrationRequest"
        x-exportParamName: "Body"
      responses:
        "201":
          description: ""
      x-unitTests:
      - request:
          method: "POST"
          uri: "/v2/registrations"
          headers:
            Content-Type: "application/json"
          body: "{  \"description\": \"Relative Humidity Context Source\",  \"dataProvided\"\
            : {    \"entities\": [      {        \"id\": \"room2\",        \"type\"\
            : \"Room\"      }    ],    \"attrs\": [      \"relativeHumidity\"    ]\
            \  },  \"provider\": {    \"http\":{       \"url\": \"http://localhost:1234\"\
            \    }  }}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Location: "/v2/registrations/abcde98765"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Create Registration1"
        x-testDescription: "Creates a new context provider registration. This is typically\
          \ used for binding context sources\nas providers of certain data.\nThe registration\
          \ is represented by a JSON object as described at the beginning of this\
          \ section.\nResponse:\n* Successful operation uses 201 Created\n* Errors\
          \ use a non-2xx and (optionally) an error payload. See subsection on \"\
          Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/registrations/{registrationId}:
    get:
      tags:
      - "Registrations"
      summary: "Retrieve Registration"
      description: "The response is the registration represented by a JSON object\
        \ as described at the beginning of this\nsection.\nResponse:\n* Successful\
        \ operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error\
        \ payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "Retrieve Registration"
      produces:
      - "application/json"
      parameters:
      - name: "registrationId"
        in: "path"
        description: "registration Id."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      responses:
        "200":
          description: ""
          examples:
            application/json:
              id: "abcdefg"
              description: "Example Context Source"
              dataProvided:
                entities:
                - id: "Bcn_Welt"
                  type: "Room"
                attrs:
                - "temperature"
              provider:
                http:
                  url: "http://contextsource.example.org"
                supportedForwardingMode: "all"
              expires: "2017-10-31T12:00:00"
              status: "failed"
              forwardingInformation:
                timesSent: 12
                lastForwarding: "2017-10-06T16:00:00Z"
                lastFailure: "2017-10-06T16:00:00Z"
                lastSuccess: "2017-10-05T18:25:00Z"
          schema:
            $ref: "#/definitions/RetrieveRegistrationResponse"
      x-unitTests:
      - request:
          method: "GET"
          uri: "/v2/registrations/abcdef"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "RAW"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: "application/json"
          body: "  {        \"id\": \"abcdefg\",        \"description\": \"Example\
            \ Context Source\",        \"dataProvided\": {          \"entities\":\
            \ [            {              \"id\": \"Bcn_Welt\",              \"type\"\
            : \"Room\"            }          ],          \"attrs\": [            \"\
            temperature\"          ]        },        \"provider\": {          \"\
            http\": {            \"url\": \"http://contextsource.example.org\"   \
            \       },          \"supportedForwardingMode\": \"all\"        },   \
            \     \"expires\": \"2017-10-31T12:00:00\",        \"status\": \"failed\"\
            ,        \"forwardingInformation\": {          \"timesSent\": 12,    \
            \      \"lastForwarding\": \"2017-10-06T16:00:00.00Z\",          \"lastFailure\"\
            : \"2017-10-06T16:00:00.00Z\",          \"lastSuccess\": \"2017-10-05T18:25:00.00Z\"\
            ,        }  }      "
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Retrieve Registration1"
        x-testDescription: "The response is the registration represented by a JSON\
          \ object as described at the beginning of this\nsection.\nResponse:\n* Successful\
          \ operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error\
          \ payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    delete:
      tags:
      - "Registrations"
      summary: "Delete Registration"
      description: "Cancels a context provider registration.\nResponse:\n* Successful\
        \ operation uses 204 No Content\n* Errors use a non-2xx and (optionally) an\
        \ error payload. See subsection on \"Error Responses\" for\n  more details."
      operationId: "Delete Registration"
      produces:
      - "application/json"
      parameters:
      - name: "registrationId"
        in: "path"
        description: "registration Id."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      responses:
        "204":
          description: ""
      x-unitTests:
      - request:
          method: "DELETE"
          uri: "/v2/registrations/abcdef"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Delete Registration1"
        x-testDescription: "Cancels a context provider registration.\nResponse:\n\
          * Successful operation uses 204 No Content\n* Errors use a non-2xx and (optionally)\
          \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
    patch:
      tags:
      - "Registrations"
      summary: "Update Registration"
      description: "Only the fields included in the request are updated in the registration.\n\
        Response:\n* Successful operation uses 204 No Content\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "Update Registration"
      produces:
      - "application/json"
      parameters:
      - name: "registrationId"
        in: "path"
        description: "registration Id."
        required: true
        type: "string"
        x-exportParamName: "RegistrationId"
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/UpdateRegistrationRequest"
        x-exportParamName: "Body"
      responses:
        "204":
          description: ""
      x-unitTests:
      - request:
          method: "PATCH"
          uri: "/v2/registrations/abcdef"
          headers:
            Content-Type: "application/json"
          body: "{    \"expires\": \"2017-10-04T00:00:00\"}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Update Registration1"
        x-testDescription: "Only the fields included in the request are updated in\
          \ the registration.\nResponse:\n* Successful operation uses 204 No Content\n\
          * Errors use a non-2xx and (optionally) an error payload. See subsection\
          \ on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/op/update:
    post:
      tags:
      - "Batch Operations"
      summary: "Update"
      description: "This operation allows to create, update and/or delete several\
        \ entities in a single batch operation.\nThe payload is an object with two\
        \ properties:\n+ `actionType`, to specify the kind of update action to do:\
        \ either `append`, `appendStrict`, `update`,\n  `delete`, or `replace`.\n\
        + `entities`, an array of entities, each entity specified using the JSON entity\
        \ representation format\n  (described in the section \"JSON Entity Representation\"\
        ).\nThis operation is split in as many individual operations as entities in\
        \ the `entities` vector, so\nthe `actionType` is executed for each one of\
        \ them. Depending on the `actionType`, a mapping with\nregular non-batch operations\
        \ can be done:\n* `append`: maps to `POST /v2/entities` (if the entity does\
        \ not already exist) or `POST /v2/entities/<id>/attrs`\n  (if the entity already\
        \ exists).\n* `appendStrict`: maps to `POST /v2/entities` (if the entity does\
        \ not already exist) or\n  `POST /v2/entities/<id>/attrs?options=append` (if\
        \ the entity already exists).\n* `update`: maps to `PATCH /v2/entities/<id>/attrs`.\n\
        * `delete`: maps to `DELETE /v2/entities/<id>/attrs/<attrName>` on every attribute\
        \ included in the entity or\n  to `DELETE /v2/entities/<id>` if no attribute\
        \ were included in the entity.\n* `replace`: maps to `PUT /v2/entities/<id>/attrs`.\n\
        Response:\n* Successful operation uses 204 No Content.\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "Update"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/UpdateRequest"
        x-exportParamName: "Body"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "keyValues"
        x-enum-elements:
        - name: "keyValues"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "204":
          description: ""
      x-unitTests:
      - request:
          method: "POST"
          uri: "/v2/op/update"
          headers:
            Content-Type: "application/json"
          body: "{  \"actionType\": \"append\",  \"entities\": [    {      \"type\"\
            : \"Room\",      \"id\": \"Bcn-Welt\",      \"temperature\": {       \
            \ \"value\": 21.7       },      \"humidity\": {        \"value\": 60 \
            \     }    },    {      \"type\": \"Room\",      \"id\": \"Mad_Aud\",\
            \      \"temperature\": {        \"value\": 22.9      },      \"humidity\"\
            : {        \"value\": 85      }    }  ]}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Update1"
        x-testDescription: "This operation allows to create, update and/or delete\
          \ several entities in a single batch operation.\nThe payload is an object\
          \ with two properties:\n+ `actionType`, to specify the kind of update action\
          \ to do: either `append`, `appendStrict`, `update`,\n  `delete`, or `replace`.\n\
          + `entities`, an array of entities, each entity specified using the JSON\
          \ entity representation format\n  (described in the section \"JSON Entity\
          \ Representation\").\nThis operation is split in as many individual operations\
          \ as entities in the `entities` vector, so\nthe `actionType` is executed\
          \ for each one of them. Depending on the `actionType`, a mapping with\n\
          regular non-batch operations can be done:\n* `append`: maps to `POST /v2/entities`\
          \ (if the entity does not already exist) or `POST /v2/entities/<id>/attrs`\n\
          \  (if the entity already exists).\n* `appendStrict`: maps to `POST /v2/entities`\
          \ (if the entity does not already exist) or\n  `POST /v2/entities/<id>/attrs?options=append`\
          \ (if the entity already exists).\n* `update`: maps to `PATCH /v2/entities/<id>/attrs`.\n\
          * `delete`: maps to `DELETE /v2/entities/<id>/attrs/<attrName>` on every\
          \ attribute included in the entity or\n  to `DELETE /v2/entities/<id>` if\
          \ no attribute were included in the entity.\n* `replace`: maps to `PUT /v2/entities/<id>/attrs`.\n\
          Response:\n* Successful operation uses 204 No Content.\n* Errors use a non-2xx\
          \ and (optionally) an error payload. See subsection on \"Error Responses\"\
          \ for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/op/query:
    post:
      tags:
      - "Batch Operations"
      summary: "Query"
      description: "The response payload is an Array containing one object per matching\
        \ entity, or an empty array `[]` if \nno entities are found. The entities\
        \ follow the JSON entity representation format\n(described in the section\
        \ \"JSON Entity Representation\").\nThe payload may contain the following\
        \ elements (all of them optional):\n+ `entities`: a list of entites to search\
        \ for. Each element is represented by a JSON object with the\n  following\
        \ elements:\n    + `id` or `idPattern`: Id or pattern of the affected entities.\
        \ Both cannot be used at the same\n      time, but one of them must be present.\n\
        \    + `type` or `typePattern`: Type or type pattern of the entities to search\
        \ for. Both cannot be used at\n      the same time. If omitted, it means \"\
        any entity type\".\n+ `attrs`: List of attributes to be provided (if not specified,\
        \ all attributes).\n+ `expression`: an expression composed of `q`, `mq`, `georel`,\
        \ `geometry` and `coords` (see \"List\n   entities\" operation above about\
        \ this field).\n+ `metadata`: a list of metadata names to include in the response.\n\
        \   See \"Filtering out attributes and metadata\" section for more detail.\n\
        Response code:\n* Successful operation uses 200 OK\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "Query"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/QueryRequest"
        x-exportParamName: "Body"
      - name: "limit"
        in: "query"
        description: "Limit the number of entities to be retrieved."
        required: false
        type: "number"
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: "double"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float64"
      - name: "offset"
        in: "query"
        description: "Skip a number of records."
        required: false
        type: "number"
        exclusiveMaximum: false
        exclusiveMinimum: false
        format: "double"
        x-exportParamName: "Offset"
        x-optionalDataType: "Float64"
      - name: "orderBy"
        in: "query"
        description: "Criteria for ordering results.\nSee \"Ordering Results\" section\
          \ for details."
        required: false
        type: "string"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "count"
        - "keyValues"
        - "values"
        - "unique"
        x-enum-elements:
        - name: "count"
          description: ""
        - name: "keyValues"
          description: ""
        - name: "values"
          description: ""
        - name: "unique"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
          examples:
            application/json:
            - type: "Room"
              id: "DC_S1-D41"
              temperature:
                value: 35.6
                type: "Number"
            - type: "Room"
              id: "Boe-Idearium"
              temperature:
                value: 22.5
                type: "Number"
            - type: "Car"
              id: "P-9873-K"
              temperature:
                value: 40
                type: "Number"
                accuracy: 2
                timestamp:
                  value: "2015-06-04T07:20:27.378Z"
                  type: "DateTime"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/QueryResponse"
      x-unitTests:
      - request:
          method: "POST"
          uri: "/v2/op/query?limit=10&offset=20&orderBy=temperature,!speed"
          headers:
            Content-Type: "application/json"
          body: "{  \"entities\": [    {      \"idPattern\": \".*\",      \"type\"\
            : \"Room\"    },    {      \"id\": \"Car\",      \"type\": \"P-9873-K\"\
            \    }  ],  \"attrs\": [    \"temperature\",    \"humidity\"  ],  \"expression\"\
            : {     \"q\": \"temperature>20\"  },  \"metadata\": [    \"accuracy\"\
            ,    \"timestamp\"  ]}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "RAW"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: "application/json"
          body: "[  {    \"type\": \"Room\",    \"id\": \"DC_S1-D41\",    \"temperature\"\
            : {      \"value\": 35.6,      \"type\": \"Number\"    }  },  {    \"\
            type\": \"Room\",    \"id\": \"Boe-Idearium\",    \"temperature\": { \
            \     \"value\": 22.5,      \"type\": \"Number\"    }  },  {    \"type\"\
            : \"Car\",    \"id\": \"P-9873-K\",    \"temperature\": {      \"value\"\
            : 40,      \"type\": \"Number\",      \"accuracy\": 2,      \"timestamp\"\
            : {        \"value\": \"2015-06-04T07:20:27.378Z\",        \"type\": \"\
            DateTime\"      }    }  }]"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Query1"
        x-testDescription: "The response payload is an Array containing one object\
          \ per matching entity, or an empty array `[]` if \nno entities are found.\
          \ The entities follow the JSON entity representation format\n(described\
          \ in the section \"JSON Entity Representation\").\nThe payload may contain\
          \ the following elements (all of them optional):\n+ `entities`: a list of\
          \ entites to search for. Each element is represented by a JSON object with\
          \ the\n  following elements:\n    + `id` or `idPattern`: Id or pattern of\
          \ the affected entities. Both cannot be used at the same\n      time, but\
          \ one of them must be present.\n    + `type` or `typePattern`: Type or type\
          \ pattern of the entities to search for. Both cannot be used at\n      the\
          \ same time. If omitted, it means \"any entity type\".\n+ `attrs`: List\
          \ of attributes to be provided (if not specified, all attributes).\n+ `expression`:\
          \ an expression composed of `q`, `mq`, `georel`, `geometry` and `coords`\
          \ (see \"List\n   entities\" operation above about this field).\n+ `metadata`:\
          \ a list of metadata names to include in the response.\n   See \"Filtering\
          \ out attributes and metadata\" section for more detail.\nResponse code:\n\
          * Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally)\
          \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /v2/op/notify:
    post:
      tags:
      - "Batch Operations"
      summary: "Notify"
      description: "This operation is intended to consume a notification payload so\
        \ that all the entity data included by such notification is persisted, overwriting\
        \ if necessary.\nThis operation is useful when one NGSIv2 endpoint is subscribed\
        \ to another NGSIv2 endpoint (federation scenarios). \nThe request payload\
        \ must be an NGSIv2 notification payload. \nThe behaviour must be exactly\
        \ the same as `POST /v2/op/update` with `actionType` equal to `append`.\n\
        Response code:\n* Successful operation uses 200 OK\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: "Notify"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ContentType"
      - in: "body"
        name: "body"
        description: ""
        required: true
        schema:
          $ref: "#/definitions/NotifyRequest"
        x-exportParamName: "Body"
      - name: "options"
        in: "query"
        description: "Options dictionary"
        required: false
        type: "string"
        enum:
        - "keyValues"
        x-enum-elements:
        - name: "keyValues"
          description: ""
        x-exportParamName: "Options"
        x-optionalDataType: "String"
      responses:
        "200":
          description: ""
      x-unitTests:
      - request:
          method: "POST"
          uri: "/v2/op/notify"
          headers:
            Content-Type: "application/json"
          body: "{  \"subscriptionId\": \"5aeb0ee97d4ef10a12a0262f\",  \"data\": [{\
            \    \"type\": \"Room\",    \"id\": \"DC_S1-D41\",    \"temperature\"\
            : {      \"value\": 35.6,      \"type\": \"Number\"    }  },  {    \"\
            type\": \"Room\",    \"id\": \"Boe-Idearium\",    \"temperature\": { \
            \     \"value\": 22.5,      \"type\": \"Number\"    }  }]}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: "NONE"
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: "application/json"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: "Notify1"
        x-testDescription: "This operation is intended to consume a notification payload\
          \ so that all the entity data included by such notification is persisted,\
          \ overwriting if necessary.\nThis operation is useful when one NGSIv2 endpoint\
          \ is subscribed to another NGSIv2 endpoint (federation scenarios). \nThe\
          \ request payload must be an NGSIv2 notification payload. \nThe behaviour\
          \ must be exactly the same as `POST /v2/op/update` with `actionType` equal\
          \ to `append`.\nResponse code:\n* Successful operation uses 200 OK\n* Errors\
          \ use a non-2xx and (optionally) an error payload. See subsection on \"\
          Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
definitions:
  RetrieveApiResourcesResponse:
    type: "object"
    required:
    - "entities_url"
    - "registrations_url"
    - "subscriptions_url"
    - "types_url"
    properties:
      entities_url:
        type: "string"
        example: "/v2/entities"
        description: "URL which points to the entities resource"
      types_url:
        type: "string"
        example: "/v2/types"
        description: "URL which points to the types resource"
      subscriptions_url:
        type: "string"
        example: "/v2/subscriptions"
        description: "URL which points to the\nsubscriptions resource"
      registrations_url:
        type: "string"
        example: "/v2/registrations"
        description: "URL which points to the\nregistrations resource"
    title: "Retrieve API Resources response"
    example:
      entities_url: "/v2/entities"
      types_url: "/v2/types"
      subscriptions_url: "/v2/subscriptions"
      registrations_url: "/v2/registrations"
  Options:
    type: "string"
    title: "options"
    example: "count"
    enum:
    - "count"
    - "keyValues"
    - "values"
    - "unique"
    x-enum-elements:
    - name: "count"
      description: ""
    - name: "keyValues"
      description: ""
    - name: "values"
      description: ""
    - name: "unique"
      description: ""
  ListEntitiesResponse:
    type: "object"
    required:
    - "id"
    - "type"
    properties:
      type:
        type: "string"
        example: "Room"
        description: ""
      id:
        type: "string"
        example: "DC_S1-D41"
        description: ""
      temperature:
        type: "object"
        example:
          value: 35.6
          type: "Number"
          metadata: {}
        description: ""
        properties: {}
      speed:
        type: "object"
        example:
          value: 100
          type: "number"
          metadata:
            accuracy:
              value: 2
              type: "Number"
            timestamp:
              value: "2015-06-04T07:20:27.378Z"
              type: "DateTime"
        description: ""
        properties: {}
    title: "List Entities response"
    example:
      type: "Room"
      id: "DC_S1-D41"
      temperature:
        value: 35.6
        type: "Number"
        metadata: {}
  Options3:
    type: "string"
    title: "options3"
    example: "keyValues"
    enum:
    - "keyValues"
    - "upsert"
    x-enum-elements:
    - name: "keyValues"
      description: ""
    - name: "upsert"
      description: ""
  CreateEntityRequest:
    type: "object"
    required:
    - "humidity"
    - "id"
    - "location"
    - "temperature"
    - "type"
    properties:
      type:
        type: "string"
        example: "Room"
        description: ""
      id:
        type: "string"
        example: "Bcn-Welt"
        description: ""
      temperature:
        type: "object"
        example:
          value: 21.7
        description: ""
        properties: {}
      humidity:
        type: "object"
        example:
          value: 60
        description: ""
        properties: {}
      location:
        type: "object"
        example:
          value: "41.3763726, 2.1864475"
          type: "geo:point"
          metadata:
            crs:
              value: "WGS84"
        description: ""
        properties: {}
    title: "Create Entity request"
    example:
      type: "Room"
      id: "Bcn-Welt"
      temperature:
        value: 21.7
      humidity:
        value: 60
      location:
        value: "41.3763726, 2.1864475"
        type: "geo:point"
        metadata:
          crs:
            value: "WGS84"
  Options6:
    type: "string"
    title: "options6"
    example: "keyValues"
    enum:
    - "keyValues"
    - "values"
    - "unique"
    x-enum-elements:
    - name: "keyValues"
      description: ""
    - name: "values"
      description: ""
    - name: "unique"
      description: ""
  RetrieveEntityResponse:
    type: "object"
    required:
    - "humidity"
    - "id"
    - "location"
    - "temperature"
    - "type"
    properties:
      type:
        type: "string"
        example: "Room"
        description: ""
      id:
        type: "string"
        example: "Bcn_Welt"
        description: ""
      temperature:
        type: "object"
        example:
          value: 21.7
          type: "Number"
        description: ""
        properties: {}
      humidity:
        type: "object"
        example:
          value: 60
          type: "Number"
        description: ""
        properties: {}
      location:
        type: "object"
        example:
          value: "41.3763726, 2.1864475"
          type: "geo:point"
          metadata:
            crs:
              value: "WGS84"
              type: "Text"
        description: ""
        properties: {}
    title: "Retrieve Entity response"
    example:
      type: "Room"
      id: "Bcn_Welt"
      temperature:
        value: 21.7
        type: "Number"
      humidity:
        value: 60
        type: "Number"
      location:
        value: "41.3763726, 2.1864475"
        type: "geo:point"
        metadata:
          crs:
            value: "WGS84"
            type: "Text"
  RetrieveEntityAttributesResponse:
    type: "object"
    required:
    - "humidity"
    - "location"
    - "temperature"
    properties:
      temperature:
        type: "object"
        example:
          value: 21.7
          type: "Number"
        description: ""
        properties: {}
      humidity:
        type: "object"
        example:
          value: 60
          type: "Number"
        description: ""
        properties: {}
      location:
        type: "object"
        example:
          value: "41.3763726, 2.1864475"
          type: "geo:point"
          metadata:
            crs:
              value: "WGS84"
              type: "Text"
        description: ""
        properties: {}
    title: "Retrieve Entity Attributes response"
    example:
      temperature:
        value: 21.7
        type: "Number"
      humidity:
        value: 60
        type: "Number"
      location:
        value: "41.3763726, 2.1864475"
        type: "geo:point"
        metadata:
          crs:
            value: "WGS84"
            type: "Text"
  Options10:
    type: "string"
    title: "options10"
    example: "append"
    enum:
    - "append"
    - "keyValues"
    x-enum-elements:
    - name: "append"
      description: ""
    - name: "keyValues"
      description: ""
  UpdateOrAppendEntityAttributesRequest:
    type: "object"
    required:
    - "ambientNoise"
    properties:
      ambientNoise:
        type: "object"
        example:
          value: 31.5
        description: ""
        properties: {}
    title: "Update or Append Entity Attributes request"
    example:
      ambientNoise:
        value: 31.5
  Options12:
    type: "string"
    title: "options12"
    example: "keyValues"
    enum:
    - "keyValues"
    x-enum-elements:
    - name: "keyValues"
      description: ""
  UpdateExistingEntityAttributesRequest:
    type: "object"
    required:
    - "seatNumber"
    - "temperature"
    properties:
      temperature:
        type: "object"
        example:
          value: 25.5
        description: ""
        properties: {}
      seatNumber:
        type: "object"
        example:
          value: 6
        description: ""
        properties: {}
    title: "Update Existing Entity Attributes request"
    example:
      temperature:
        value: 25.5
      seatNumber:
        value: 6
  ReplaceAllEntityAttributesRequest:
    type: "object"
    required:
    - "seatNumber"
    - "temperature"
    properties:
      temperature:
        type: "object"
        example:
          value: 25.5
        description: ""
        properties: {}
      seatNumber:
        type: "object"
        example:
          value: 6
        description: ""
        properties: {}
    title: "Replace all entity attributes request"
    example:
      temperature:
        value: 25.5
      seatNumber:
        value: 6
  GetAttributeDataResponse:
    type: "object"
    required:
    - "metadata"
    - "type"
    - "value"
    properties:
      value:
        type: "number"
        format: "double"
        example: 21.7
        description: ""
      type:
        type: "string"
        example: "Number"
        description: ""
      metadata:
        type: "object"
        example: {}
        description: ""
        properties: {}
    title: "Get attribute data response"
    example:
      value: 21.7
      type: "Number"
      metadata: {}
  UpdateAttributeDataRequest:
    type: "object"
    required:
    - "metadata"
    - "value"
    properties:
      value:
        type: "number"
        format: "double"
        example: 25.0
        description: ""
      metadata:
        type: "object"
        example:
          unitCode:
            value: "CEL"
        description: ""
        properties: {}
    title: "Update Attribute Data request"
    example:
      value: 25.0
      metadata:
        unitCode:
          value: "CEL"
  GetAttributeValueResponse:
    type: "object"
    required:
    - "address"
    - "city"
    - "country"
    - "zipCode"
    properties:
      address:
        type: "string"
        example: "Ronda de la Comunicacion s/n"
        description: ""
      zipCode:
        type: "integer"
        format: "int32"
        example: 28050
        description: ""
      city:
        type: "string"
        example: "Madrid"
        description: ""
      country:
        type: "string"
        example: "Spain"
        description: ""
    title: "Get Attribute Value response"
    example:
      address: "Ronda de la Comunicacion s/n"
      zipCode: 28050
      city: "Madrid"
      country: "Spain"
  UpdateAttributeValueRequest:
    type: "object"
    required:
    - "address"
    - "city"
    - "country"
    - "zipCode"
    properties:
      address:
        type: "string"
        example: "Ronda de la Comunicacion s/n"
        description: ""
      zipCode:
        type: "integer"
        format: "int32"
        example: 28050
        description: ""
      city:
        type: "string"
        example: "Madrid"
        description: ""
      country:
        type: "string"
        example: "Spain"
        description: ""
    title: "Update Attribute Value request"
    example:
      address: "Ronda de la Comunicacion s/n"
      zipCode: 28050
      city: "Madrid"
      country: "Spain"
  Options20:
    type: "string"
    title: "options20"
    example: "count"
    enum:
    - "count"
    - "values"
    x-enum-elements:
    - name: "count"
      description: ""
    - name: "values"
      description: ""
  ListEntityTypesResponse:
    type: "object"
    required:
    - "attrs"
    - "count"
    - "type"
    properties:
      type:
        type: "string"
        example: "Car"
        description: ""
      attrs:
        type: "object"
        example:
          speed:
            types:
            - "Number"
          fuel:
            types:
            - "gasoline"
            - "diesel"
          temperature:
            types:
            - "urn:phenomenum:temperature"
        description: ""
        properties: {}
      count:
        type: "integer"
        format: "int32"
        example: 12
        description: ""
    title: "List Entity Types response"
    example:
      type: "Car"
      attrs:
        speed:
          types:
          - "Number"
        fuel:
          types:
          - "gasoline"
          - "diesel"
        temperature:
          types:
          - "urn:phenomenum:temperature"
      count: 12
  RetrieveEntityTypeResponse:
    type: "object"
    required:
    - "attrs"
    - "count"
    properties:
      attrs:
        type: "object"
        example:
          pressure:
            types:
            - "Number"
          humidity:
            types:
            - "percentage"
          temperature:
            types:
            - "urn:phenomenum:temperature"
        description: ""
        properties: {}
      count:
        type: "integer"
        format: "int32"
        example: 7
        description: ""
    title: "Retrieve entity type response"
    example:
      attrs:
        pressure:
          types:
          - "Number"
        humidity:
          types:
          - "percentage"
        temperature:
          types:
          - "urn:phenomenum:temperature"
      count: 7
  Options23:
    type: "string"
    title: "options23"
    example: "count"
    enum:
    - "count"
    x-enum-elements:
    - name: "count"
      description: ""
  ListSubscriptionsResponse:
    type: "object"
    required:
    - "description"
    - "expires"
    - "id"
    - "notification"
    - "status"
    - "subject"
    - "throttling"
    properties:
      id:
        type: "string"
        example: "abcdefg"
        description: ""
      description:
        type: "string"
        example: "One subscription to rule them all"
        description: ""
      subject:
        type: "object"
        example:
          entities:
          - id: "Bcn_Welt"
            type: "Room"
          condition:
            attrs:
            - "temperature "
            expression:
              q: "temperature>40"
        description: ""
        properties: {}
      notification:
        type: "object"
        example:
          httpCustom:
            url: "http://localhost:1234"
            headers:
              X-MyHeader: "foo"
            qs:
              authToken: "bar"
          attrsFormat: "keyValues"
          attrs:
          - "temperature"
          - "humidity"
          timesSent: 12
          lastNotification: "2015-10-05T16:00:00Z"
          lastFailure: "2015-10-06T16:00:00Z"
        description: ""
        properties: {}
      expires:
        type: "string"
        example: "4/5/2016 2:00:00 PM"
        description: ""
      status:
        type: "string"
        example: "failed"
        description: ""
      throttling:
        type: "integer"
        format: "int32"
        example: 5
        description: ""
    title: "List Subscriptions response"
    example:
      id: "abcdefg"
      description: "One subscription to rule them all"
      subject:
        entities:
        - id: "Bcn_Welt"
          type: "Room"
        condition:
          attrs:
          - "temperature "
          expression:
            q: "temperature>40"
      notification:
        httpCustom:
          url: "http://localhost:1234"
          headers:
            X-MyHeader: "foo"
          qs:
            authToken: "bar"
        attrsFormat: "keyValues"
        attrs:
        - "temperature"
        - "humidity"
        timesSent: 12
        lastNotification: "2015-10-05T16:00:00Z"
        lastFailure: "2015-10-06T16:00:00Z"
      expires: "2016-04-05T14:00:00Z"
      status: "failed"
      throttling: 5
  CreateSubscriptionRequest:
    type: "object"
    required:
    - "description"
    - "expires"
    - "notification"
    - "subject"
    - "throttling"
    properties:
      description:
        type: "string"
        example: "One subscription to rule them all"
        description: ""
      subject:
        type: "object"
        example:
          entities:
          - idPattern: ".*"
            type: "Room"
          condition:
            attrs:
            - "temperature"
            expression:
              q: "temperature>40"
        description: ""
        properties: {}
      notification:
        type: "object"
        example:
          http:
            url: "http://localhost:1234"
          attrs:
          - "temperature"
          - "humidity"
        description: ""
        properties: {}
      expires:
        type: "string"
        example: "4/5/2016 2:00:00 PM"
        description: ""
      throttling:
        type: "integer"
        format: "int32"
        example: 5
        description: ""
    title: "Create Subscription request"
    example:
      description: "One subscription to rule them all"
      subject:
        entities:
        - idPattern: ".*"
          type: "Room"
        condition:
          attrs:
          - "temperature"
          expression:
            q: "temperature>40"
      notification:
        http:
          url: "http://localhost:1234"
        attrs:
        - "temperature"
        - "humidity"
      expires: "2016-04-05T14:00:00Z"
      throttling: 5
  UpdateSubscriptionRequest:
    type: "object"
    required:
    - "expires"
    properties:
      expires:
        type: "string"
        example: "4/5/2016 2:00:00 PM"
        description: ""
    title: "Update Subscription request"
    example:
      expires: "2016-04-05T14:00:00Z"
  ListRegistrationsResponse:
    type: "object"
    required:
    - "dataProvided"
    - "description"
    - "expires"
    - "forwardingInformation"
    - "id"
    - "provider"
    - "status"
    properties:
      id:
        type: "string"
        example: "abcdefg"
        description: ""
      description:
        type: "string"
        example: "Example Context Source"
        description: ""
      dataProvided:
        type: "object"
        example:
          entities:
          - id: "Bcn_Welt"
            type: "Room"
          attrs:
          - "temperature"
        description: ""
        properties: {}
      provider:
        type: "object"
        example:
          http:
            url: "http://contextsource.example.org"
          supportedForwardingMode: "all"
        description: ""
        properties: {}
      expires:
        type: "string"
        example: "10/31/2017 12:00:00 PM"
        description: ""
      status:
        type: "string"
        example: "active"
        description: ""
      forwardingInformation:
        type: "object"
        example:
          timesSent: 12
          lastForwarding: "2017-10-06T16:00:00Z"
          lastSuccess: "2017-10-06T16:00:00Z"
          lastFailure: "2017-10-05T16:00:00Z"
        description: ""
        properties: {}
    title: "List Registrations response"
    example:
      id: "abcdefg"
      description: "Example Context Source"
      dataProvided:
        entities:
        - id: "Bcn_Welt"
          type: "Room"
        attrs:
        - "temperature"
      provider:
        http:
          url: "http://contextsource.example.org"
        supportedForwardingMode: "all"
      expires: "2017-10-31T12:00:00"
      status: "active"
      forwardingInformation:
        timesSent: 12
        lastForwarding: "2017-10-06T16:00:00Z"
        lastSuccess: "2017-10-06T16:00:00Z"
        lastFailure: "2017-10-05T16:00:00Z"
  CreateRegistrationRequest:
    type: "object"
    required:
    - "dataProvided"
    - "description"
    - "provider"
    properties:
      description:
        type: "string"
        example: "Relative Humidity Context Source"
        description: ""
      dataProvided:
        type: "object"
        example:
          entities:
          - id: "room2"
            type: "Room"
          attrs:
          - "relativeHumidity"
        description: ""
        properties: {}
      provider:
        type: "object"
        example:
          http:
            url: "http://localhost:1234"
        description: ""
        properties: {}
    title: "Create Registration request"
    example:
      description: "Relative Humidity Context Source"
      dataProvided:
        entities:
        - id: "room2"
          type: "Room"
        attrs:
        - "relativeHumidity"
      provider:
        http:
          url: "http://localhost:1234"
  RetrieveRegistrationResponse:
    type: "object"
    required:
    - "dataProvided"
    - "description"
    - "expires"
    - "forwardingInformation"
    - "id"
    - "provider"
    - "status"
    properties:
      id:
        type: "string"
        example: "abcdefg"
        description: ""
      description:
        type: "string"
        example: "Example Context Source"
        description: ""
      dataProvided:
        type: "object"
        example:
          entities:
          - id: "Bcn_Welt"
            type: "Room"
          attrs:
          - "temperature"
        description: ""
        properties: {}
      provider:
        type: "object"
        example:
          http:
            url: "http://contextsource.example.org"
          supportedForwardingMode: "all"
        description: ""
        properties: {}
      expires:
        type: "string"
        example: "10/31/2017 12:00:00 PM"
        description: ""
      status:
        type: "string"
        example: "failed"
        description: ""
      forwardingInformation:
        type: "object"
        example:
          timesSent: 12
          lastForwarding: "2017-10-06T16:00:00Z"
          lastFailure: "2017-10-06T16:00:00Z"
          lastSuccess: "2017-10-05T18:25:00Z"
        description: ""
        properties: {}
    title: "Retrieve Registration response"
    example:
      id: "abcdefg"
      description: "Example Context Source"
      dataProvided:
        entities:
        - id: "Bcn_Welt"
          type: "Room"
        attrs:
        - "temperature"
      provider:
        http:
          url: "http://contextsource.example.org"
        supportedForwardingMode: "all"
      expires: "2017-10-31T12:00:00"
      status: "failed"
      forwardingInformation:
        timesSent: 12
        lastForwarding: "2017-10-06T16:00:00Z"
        lastFailure: "2017-10-06T16:00:00Z"
        lastSuccess: "2017-10-05T18:25:00Z"
  UpdateRegistrationRequest:
    type: "object"
    required:
    - "expires"
    properties:
      expires:
        type: "string"
        example: "10/4/2017 12:00:00 AM"
        description: ""
    title: "Update Registration request"
    example:
      expires: "2017-10-04T00:00:00"
  UpdateRequest:
    type: "object"
    required:
    - "actionType"
    - "entities"
    properties:
      actionType:
        type: "string"
        example: "append"
        description: ""
      entities:
        type: "array"
        example:
        - type: "Room"
          id: "Bcn-Welt"
          temperature:
            value: 21.7
          humidity:
            value: 60
        - type: "Room"
          id: "Mad_Aud"
          temperature:
            value: 22.9
          humidity:
            value: 85
        description: ""
        items:
          type: "object"
          properties: {}
    title: "Update request"
    example:
      actionType: "append"
      entities:
      - type: "Room"
        id: "Bcn-Welt"
        temperature:
          value: 21.7
        humidity:
          value: 60
      - type: "Room"
        id: "Mad_Aud"
        temperature:
          value: 22.9
        humidity:
          value: 85
  QueryRequest:
    type: "object"
    required:
    - "attrs"
    - "entities"
    - "expression"
    - "metadata"
    properties:
      entities:
        type: "array"
        example:
        - idPattern: ".*"
          type: "Room"
        - id: "Car"
          type: "P-9873-K"
        description: ""
        items:
          type: "object"
          properties: {}
      attrs:
        type: "array"
        example:
        - "temperature"
        - "humidity"
        description: ""
        items:
          type: "string"
      expression:
        type: "object"
        example:
          q: "temperature>20"
        description: ""
        properties: {}
      metadata:
        type: "array"
        example:
        - "accuracy"
        - "timestamp"
        description: ""
        items:
          type: "string"
    title: "Query request"
    example:
      entities:
      - idPattern: ".*"
        type: "Room"
      - id: "Car"
        type: "P-9873-K"
      attrs:
      - "temperature"
      - "humidity"
      expression:
        q: "temperature>20"
      metadata:
      - "accuracy"
      - "timestamp"
  QueryResponse:
    type: "object"
    required:
    - "id"
    - "temperature"
    - "type"
    properties:
      type:
        type: "string"
        example: "Room"
        description: ""
      id:
        type: "string"
        example: "DC_S1-D41"
        description: ""
      temperature:
        type: "object"
        example:
          value: 35.6
          type: "Number"
        description: ""
        properties: {}
    title: "Query response"
    example:
      type: "Room"
      id: "DC_S1-D41"
      temperature:
        value: 35.6
        type: "Number"
  NotifyRequest:
    type: "object"
    required:
    - "data"
    - "subscriptionId"
    properties:
      subscriptionId:
        type: "string"
        example: "5aeb0ee97d4ef10a12a0262f"
        description: ""
      data:
        type: "array"
        example:
        - type: "Room"
          id: "DC_S1-D41"
          temperature:
            value: 35.6
            type: "Number"
        - type: "Room"
          id: "Boe-Idearium"
          temperature:
            value: 22.5
            type: "Number"
        description: ""
        items:
          type: "object"
          properties: {}
    title: "Notify request"
    example:
      subscriptionId: "5aeb0ee97d4ef10a12a0262f"
      data:
      - type: "Room"
        id: "DC_S1-D41"
        temperature:
          value: 35.6
          type: "Number"
      - type: "Room"
        id: "Boe-Idearium"
        temperature:
          value: 22.5
          type: "Number"
